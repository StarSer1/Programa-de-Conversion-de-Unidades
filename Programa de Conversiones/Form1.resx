<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAPgAAAH8AAAD/gAAB/8AAA//wAA///AA/8=
</value>
  </data>
</root>